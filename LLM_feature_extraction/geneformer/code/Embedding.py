

import os
from geneformer import TranscriptomeTokenizer
import torch
from pathlib import Path
import argparse



def strict_str2bool(v):
    if v.lower() == 'true':
        return True
    elif v.lower() == 'false':
        return False
    else:
        raise argparse.ArgumentTypeError('Only "True" or "False" are allowed.')



parser = argparse.ArgumentParser(description="Process file paths and device for GeneFormer embedding.")

parser.add_argument('--open_path', type=str, default='/home/zhoumurong/GeneFormer_code/Embedding/data/in/',
                    help='Path to the input data directory.')
parser.add_argument('--save_path', type=str,
                    default='/home/zhoumurong/GeneFormer_code/Embedding/output/tokenized_dataset/',
                    help='Path where the tokenized datasets will be saved.')
parser.add_argument('--save_path_embedding', type=str,
                    default='/home/zhoumurong/GeneFormer_code/Embedding/output/feature_embedding/',
                    help='Path where the feature embeddings will be saved.')
parser.add_argument('--open_path_conference_data', type=str,
                    default='/home/zhoumurong/GeneFormer_code/geneformer-main/fine_tuned_models/geneformer-6L-30M_CellClassifier_cardiomyopathies_220224/',
                    help='Path to the conference data for fine-tuned models.')
parser.add_argument('--device_choose', type=str, default='cuda:1',
                    help='Device to use for computation (e.g., cuda:0, cuda:1, cpu).')

parser.add_argument("--re_load", type=strict_str2bool, default=False, help=" ")
parser.add_argument("--trunc_num", type=int, default=2048, help=" trunc the max lengeth of gene expression")
parser.add_argument("--batch_size", type=int, default=8, help=" the inference batch group number")


args = parser.parse_args()

print("Open path:", args.open_path)
print("Save path:", args.save_path)
print("Save path for embeddings:", args.save_path_embedding)
print("Open path for conference data:", args.open_path_conference_data)
print("Device chosen:", args.device_choose)


# open_path = '/home/zhoumurong/GeneFormer_code/Embedding/data/in/'
# save_path = '/home/zhoumurong/GeneFormer_code/Embedding/output/tokenized_dataset/'
# save_path_embedding = '/home/zhoumurong/GeneFormer_code/Embedding/output/feature_embedding/'
# open_path_conference_data = '/home/zhoumurong/GeneFormer_code/geneformer-main/fine_tuned_models/geneformer-6L-30M_CellClassifier_cardiomyopathies_220224/'
# device_choose = "cuda:1"

open_path =  args.open_path
save_path =  args.save_path
save_path_embedding =  args.save_path_embedding
open_path_conference_data =  args.open_path_conference_data
device_choose = args.device_choose
re_load = args.re_load

os.makedirs(save_path, exist_ok=True)
os.makedirs(save_path_embedding, exist_ok=True)


file_name = os.listdir(open_path)[0]

file_prefix = os.path.splitext(file_name)[0]


if not re_load:

    tk = TranscriptomeTokenizer(nproc=1,norm_read=True,trunc_num =args.trunc_num)

 
    tokenized_cells, cell_metadata = tk.tokenize_data_mid(open_path,
                     file_format="h5ad")



    tokenized_dataset = tk.create_and_save_dataset(
                     tokenized_cells,
                     cell_metadata,
                     save_path,
                     file_prefix)

    if tokenized_dataset is not None:
        df_sample = tokenized_dataset.select(list(range(100))).to_pandas()
        print(df_sample.head())

else:
    tokenized_dataset = None


from geneformer import EmbExtractor



device = torch.device(device_choose if torch.cuda.is_available() else "cpu")

print(device)

# initiate EmbExtractor
embex = EmbExtractor(model_type="Pretrained",
                     num_classes=0,
                     filter_data=None,
                     max_ncells=None,
                     emb_layer=-1,
                     emb_label=None,
                     labels_to_plot=None,
                     forward_batch_size=args.batch_size,
                     nproc=16,
                     device=device)

# extracts embedding from input data
# input data is tokenized rank value encodings generated by Geneformer tokenizer (see tokenizing_scRNAseq_data.ipynb)
# example dataset: https://huggingface.co/datasets/ctheodoris/Genecorpus-30M/tree/main/example_input_files/cell_classification/disease_classification/human_dcm_hcm_nf.dataset


output_path = (Path(save_path) / file_prefix).with_suffix(".dataset")


embs = embex.extract_embs(open_path_conference_data,
                          output_path,
                          save_path_embedding,
                          file_prefix,tokenized_dataset=tokenized_dataset)



















